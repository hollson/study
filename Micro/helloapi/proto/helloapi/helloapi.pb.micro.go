// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/helloapi/helloapi.proto

package go_micro_api_helloapi

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	proto1 "github.com/micro/go-micro/api/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Helloapi service

type HelloapiService interface {
	Call(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error)
}

type helloapiService struct {
	c    client.Client
	name string
}

func NewHelloapiService(name string, c client.Client) HelloapiService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.api.helloapi"
	}
	return &helloapiService{
		c:    c,
		name: name,
	}
}

func (c *helloapiService) Call(ctx context.Context, in *proto1.Request, opts ...client.CallOption) (*proto1.Response, error) {
	req := c.c.NewRequest(c.name, "Helloapi.Call", in)
	out := new(proto1.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Helloapi service

type HelloapiHandler interface {
	Call(context.Context, *proto1.Request, *proto1.Response) error
}

func RegisterHelloapiHandler(s server.Server, hdlr HelloapiHandler, opts ...server.HandlerOption) error {
	type helloapi interface {
		Call(ctx context.Context, in *proto1.Request, out *proto1.Response) error
	}
	type Helloapi struct {
		helloapi
	}
	h := &helloapiHandler{hdlr}
	return s.Handle(s.NewHandler(&Helloapi{h}, opts...))
}

type helloapiHandler struct {
	HelloapiHandler
}

func (h *helloapiHandler) Call(ctx context.Context, in *proto1.Request, out *proto1.Response) error {
	return h.HelloapiHandler.Call(ctx, in, out)
}
